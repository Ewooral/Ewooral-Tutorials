from binarytree import Node
import queue

root = Node(1)


def insertAtLeft(rootNode, nodeValue):
    if rootNode is None:
        rootNode = nodeValue  
    else:
        q = queue.Queue()
        q.put(rootNode)
        while not q.empty():
            root = q.get()
            if root.left is not None:
                q.put(root.left)
            else:
                root.left = nodeValue
                
def insertAtRight(rootNode, nodeValue):
    if rootNode is None:
        rootNode = nodeValue 
    else:
        q = queue.Queue()
        q.put(rootNode)
        while not q.empty():
            root = q.get()
            if root.right is not None:
                q.put(root.right)
            else:
                root.right = nodeValue

def level_order(rootNode):
    if rootNode is None:
        return 
    else:
       q = queue.Queue()
       q.put(rootNode)
       while not q.empty():
         root = q.get()
         print(root.value)
         if root.left is not None:
            q.put(root.left)
         if root.right is not None:
            q.put(root.right)

def search(rootNode, value):
    if rootNode is None:
        return 
    else:
        q = queue.Queue()
        q.put(rootNode)
        while not q.empty():
            root = q.get()
            if root.value == value:
                return f"Found {value}"
            if root.left is not None:
                q.put(root.left)
            if root.right is not None:
                q.put(root.right)
        return "Not Found!"

insertAtLeft(root, Node(2))
insertAtRight(root, Node(3))

insertAtLeft(root.left, Node(4))
insertAtRight(root.left, Node(5))


print(root)
level_order(root)
print("...search...")
print(search(root, 10))



/**
 * @fileoverview gRPC-Web generated client stub for IDCardProvider
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.3
// source: IDCardProvider.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.IDCardProvider = require('./IDCardProvider_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.IDCardProvider.IDCardProviderSvcClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.IDCardProvider.IDCardProviderSvcPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.IDCardProvider.CountryIdCardRequestMessage,
 *   !proto.IDCardProvider.IDCardProvidersListResponseMessage>}
 */
const methodDescriptor_IDCardProviderSvc_IDCardProvidersPerCountry = new grpc.web.MethodDescriptor(
  '/IDCardProvider.IDCardProviderSvc/IDCardProvidersPerCountry',
  grpc.web.MethodType.UNARY,
  proto.IDCardProvider.CountryIdCardRequestMessage,
  proto.IDCardProvider.IDCardProvidersListResponseMessage,
  /**
   * @param {!proto.IDCardProvider.CountryIdCardRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.IDCardProvider.IDCardProvidersListResponseMessage.deserializeBinary
);


/**
 * @param {!proto.IDCardProvider.CountryIdCardRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.IDCardProvider.IDCardProvidersListResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.IDCardProvider.IDCardProvidersListResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.IDCardProvider.IDCardProviderSvcClient.prototype.iDCardProvidersPerCountry =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/IDCardProvidersPerCountry',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_IDCardProvidersPerCountry,
      callback);
};


/**
 * @param {!proto.IDCardProvider.CountryIdCardRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.IDCardProvider.IDCardProvidersListResponseMessage>}
 *     Promise that resolves to the response
 */
proto.IDCardProvider.IDCardProviderSvcPromiseClient.prototype.iDCardProvidersPerCountry =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/IDCardProvidersPerCountry',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_IDCardProvidersPerCountry);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.IDCardProvider.IdCardCountryRequestMessage,
 *   !proto.IDCardProvider.IdCardAccessTokenResponseMessage>}
 */
const methodDescriptor_IDCardProviderSvc_SumsubGetIDCardProviderAccessToken = new grpc.web.MethodDescriptor(
  '/IDCardProvider.IDCardProviderSvc/SumsubGetIDCardProviderAccessToken',
  grpc.web.MethodType.UNARY,
  proto.IDCardProvider.IdCardCountryRequestMessage,
  proto.IDCardProvider.IdCardAccessTokenResponseMessage,
  /**
   * @param {!proto.IDCardProvider.IdCardCountryRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.IDCardProvider.IdCardAccessTokenResponseMessage.deserializeBinary
);


/**
 * @param {!proto.IDCardProvider.IdCardCountryRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.IDCardProvider.IdCardAccessTokenResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.IDCardProvider.IdCardAccessTokenResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.IDCardProvider.IDCardProviderSvcClient.prototype.sumsubGetIDCardProviderAccessToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/SumsubGetIDCardProviderAccessToken',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_SumsubGetIDCardProviderAccessToken,
      callback);
};


/**
 * @param {!proto.IDCardProvider.IdCardCountryRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.IDCardProvider.IdCardAccessTokenResponseMessage>}
 *     Promise that resolves to the response
 */
proto.IDCardProvider.IDCardProviderSvcPromiseClient.prototype.sumsubGetIDCardProviderAccessToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/SumsubGetIDCardProviderAccessToken',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_SumsubGetIDCardProviderAccessToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.IDCardProvider.IDCardProviderCredRequestMessage,
 *   !proto.IDCardProvider.IDCardProviderCredResponseMessage>}
 */
const methodDescriptor_IDCardProviderSvc_SumsubGetIdCardProviderCred = new grpc.web.MethodDescriptor(
  '/IDCardProvider.IDCardProviderSvc/SumsubGetIdCardProviderCred',
  grpc.web.MethodType.UNARY,
  proto.IDCardProvider.IDCardProviderCredRequestMessage,
  proto.IDCardProvider.IDCardProviderCredResponseMessage,
  /**
   * @param {!proto.IDCardProvider.IDCardProviderCredRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.IDCardProvider.IDCardProviderCredResponseMessage.deserializeBinary
);


/**
 * @param {!proto.IDCardProvider.IDCardProviderCredRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.IDCardProvider.IDCardProviderCredResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.IDCardProvider.IDCardProviderCredResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.IDCardProvider.IDCardProviderSvcClient.prototype.sumsubGetIdCardProviderCred =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/SumsubGetIdCardProviderCred',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_SumsubGetIdCardProviderCred,
      callback);
};


/**
 * @param {!proto.IDCardProvider.IDCardProviderCredRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.IDCardProvider.IDCardProviderCredResponseMessage>}
 *     Promise that resolves to the response
 */
proto.IDCardProvider.IDCardProviderSvcPromiseClient.prototype.sumsubGetIdCardProviderCred =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/SumsubGetIdCardProviderCred',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_SumsubGetIdCardProviderCred);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.IDCardProvider.LanguageIdCardRequestMessage,
 *   !proto.IDCardProvider.SuccessIDCardMessage>}
 */
const methodDescriptor_IDCardProviderSvc_SumsubGetIdCardProcessingStatus = new grpc.web.MethodDescriptor(
  '/IDCardProvider.IDCardProviderSvc/SumsubGetIdCardProcessingStatus',
  grpc.web.MethodType.UNARY,
  proto.IDCardProvider.LanguageIdCardRequestMessage,
  proto.IDCardProvider.SuccessIDCardMessage,
  /**
   * @param {!proto.IDCardProvider.LanguageIdCardRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.IDCardProvider.SuccessIDCardMessage.deserializeBinary
);


/**
 * @param {!proto.IDCardProvider.LanguageIdCardRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.IDCardProvider.SuccessIDCardMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.IDCardProvider.SuccessIDCardMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.IDCardProvider.IDCardProviderSvcClient.prototype.sumsubGetIdCardProcessingStatus =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/SumsubGetIdCardProcessingStatus',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_SumsubGetIdCardProcessingStatus,
      callback);
};


/**
 * @param {!proto.IDCardProvider.LanguageIdCardRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.IDCardProvider.SuccessIDCardMessage>}
 *     Promise that resolves to the response
 */
proto.IDCardProvider.IDCardProviderSvcPromiseClient.prototype.sumsubGetIdCardProcessingStatus =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/SumsubGetIdCardProcessingStatus',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_SumsubGetIdCardProcessingStatus);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.IDCardProvider.IDCardDataRequestMessage,
 *   !proto.IDCardProvider.SuccessIDCardMessage>}
 */
const methodDescriptor_IDCardProviderSvc_SumsubInitiateNewCustomerIdCardVerification = new grpc.web.MethodDescriptor(
  '/IDCardProvider.IDCardProviderSvc/SumsubInitiateNewCustomerIdCardVerification',
  grpc.web.MethodType.UNARY,
  proto.IDCardProvider.IDCardDataRequestMessage,
  proto.IDCardProvider.SuccessIDCardMessage,
  /**
   * @param {!proto.IDCardProvider.IDCardDataRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.IDCardProvider.SuccessIDCardMessage.deserializeBinary
);


/**
 * @param {!proto.IDCardProvider.IDCardDataRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.IDCardProvider.SuccessIDCardMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.IDCardProvider.SuccessIDCardMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.IDCardProvider.IDCardProviderSvcClient.prototype.sumsubInitiateNewCustomerIdCardVerification =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/SumsubInitiateNewCustomerIdCardVerification',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_SumsubInitiateNewCustomerIdCardVerification,
      callback);
};


/**
 * @param {!proto.IDCardProvider.IDCardDataRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.IDCardProvider.SuccessIDCardMessage>}
 *     Promise that resolves to the response
 */
proto.IDCardProvider.IDCardProviderSvcPromiseClient.prototype.sumsubInitiateNewCustomerIdCardVerification =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/SumsubInitiateNewCustomerIdCardVerification',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_SumsubInitiateNewCustomerIdCardVerification);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.IDCardProvider.IDCardDataRequestMessage,
 *   !proto.IDCardProvider.SuccessIDCardMessage>}
 */
const methodDescriptor_IDCardProviderSvc_SumsubUpdateNewCustomerIdCardVerificationDataWithProviderRefNo = new grpc.web.MethodDescriptor(
  '/IDCardProvider.IDCardProviderSvc/SumsubUpdateNewCustomerIdCardVerificationDataWithProviderRefNo',
  grpc.web.MethodType.UNARY,
  proto.IDCardProvider.IDCardDataRequestMessage,
  proto.IDCardProvider.SuccessIDCardMessage,
  /**
   * @param {!proto.IDCardProvider.IDCardDataRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.IDCardProvider.SuccessIDCardMessage.deserializeBinary
);


/**
 * @param {!proto.IDCardProvider.IDCardDataRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.IDCardProvider.SuccessIDCardMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.IDCardProvider.SuccessIDCardMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.IDCardProvider.IDCardProviderSvcClient.prototype.sumsubUpdateNewCustomerIdCardVerificationDataWithProviderRefNo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/SumsubUpdateNewCustomerIdCardVerificationDataWithProviderRefNo',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_SumsubUpdateNewCustomerIdCardVerificationDataWithProviderRefNo,
      callback);
};


/**
 * @param {!proto.IDCardProvider.IDCardDataRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.IDCardProvider.SuccessIDCardMessage>}
 *     Promise that resolves to the response
 */
proto.IDCardProvider.IDCardProviderSvcPromiseClient.prototype.sumsubUpdateNewCustomerIdCardVerificationDataWithProviderRefNo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/SumsubUpdateNewCustomerIdCardVerificationDataWithProviderRefNo',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_SumsubUpdateNewCustomerIdCardVerificationDataWithProviderRefNo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.IDCardProvider.LanguageIdCardRequestMessage,
 *   !proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage>}
 */
const methodDescriptor_IDCardProviderSvc_SumsubGetCustomerIdCardVerificationStatusOnEganow = new grpc.web.MethodDescriptor(
  '/IDCardProvider.IDCardProviderSvc/SumsubGetCustomerIdCardVerificationStatusOnEganow',
  grpc.web.MethodType.UNARY,
  proto.IDCardProvider.LanguageIdCardRequestMessage,
  proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage,
  /**
   * @param {!proto.IDCardProvider.LanguageIdCardRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.deserializeBinary
);


/**
 * @param {!proto.IDCardProvider.LanguageIdCardRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.IDCardProvider.IDCardProviderSvcClient.prototype.sumsubGetCustomerIdCardVerificationStatusOnEganow =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/SumsubGetCustomerIdCardVerificationStatusOnEganow',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_SumsubGetCustomerIdCardVerificationStatusOnEganow,
      callback);
};


/**
 * @param {!proto.IDCardProvider.LanguageIdCardRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage>}
 *     Promise that resolves to the response
 */
proto.IDCardProvider.IDCardProviderSvcPromiseClient.prototype.sumsubGetCustomerIdCardVerificationStatusOnEganow =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/SumsubGetCustomerIdCardVerificationStatusOnEganow',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_SumsubGetCustomerIdCardVerificationStatusOnEganow);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.IDCardProvider.IdCardReviewedDataMessage,
 *   !proto.IDCardProvider.SuccessIDCardMessage>}
 */
const methodDescriptor_IDCardProviderSvc_SumsubUpdateCustomerKycWithReviewdIdDataOnEganowFromProvider = new grpc.web.MethodDescriptor(
  '/IDCardProvider.IDCardProviderSvc/SumsubUpdateCustomerKycWithReviewdIdDataOnEganowFromProvider',
  grpc.web.MethodType.UNARY,
  proto.IDCardProvider.IdCardReviewedDataMessage,
  proto.IDCardProvider.SuccessIDCardMessage,
  /**
   * @param {!proto.IDCardProvider.IdCardReviewedDataMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.IDCardProvider.SuccessIDCardMessage.deserializeBinary
);


/**
 * @param {!proto.IDCardProvider.IdCardReviewedDataMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.IDCardProvider.SuccessIDCardMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.IDCardProvider.SuccessIDCardMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.IDCardProvider.IDCardProviderSvcClient.prototype.sumsubUpdateCustomerKycWithReviewdIdDataOnEganowFromProvider =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/SumsubUpdateCustomerKycWithReviewdIdDataOnEganowFromProvider',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_SumsubUpdateCustomerKycWithReviewdIdDataOnEganowFromProvider,
      callback);
};


/**
 * @param {!proto.IDCardProvider.IdCardReviewedDataMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.IDCardProvider.SuccessIDCardMessage>}
 *     Promise that resolves to the response
 */
proto.IDCardProvider.IDCardProviderSvcPromiseClient.prototype.sumsubUpdateCustomerKycWithReviewdIdDataOnEganowFromProvider =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/SumsubUpdateCustomerKycWithReviewdIdDataOnEganowFromProvider',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_SumsubUpdateCustomerKycWithReviewdIdDataOnEganowFromProvider);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.IDCardProvider.GhanaCardCustomerDataRequestMessage,
 *   !proto.IDCardProvider.SuccessIDCardMessage>}
 */
const methodDescriptor_IDCardProviderSvc_GhanacardSubmitCustomerData = new grpc.web.MethodDescriptor(
  '/IDCardProvider.IDCardProviderSvc/GhanacardSubmitCustomerData',
  grpc.web.MethodType.UNARY,
  proto.IDCardProvider.GhanaCardCustomerDataRequestMessage,
  proto.IDCardProvider.SuccessIDCardMessage,
  /**
   * @param {!proto.IDCardProvider.GhanaCardCustomerDataRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.IDCardProvider.SuccessIDCardMessage.deserializeBinary
);


/**
 * @param {!proto.IDCardProvider.GhanaCardCustomerDataRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.IDCardProvider.SuccessIDCardMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.IDCardProvider.SuccessIDCardMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.IDCardProvider.IDCardProviderSvcClient.prototype.ghanacardSubmitCustomerData =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/GhanacardSubmitCustomerData',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_GhanacardSubmitCustomerData,
      callback);
};


/**
 * @param {!proto.IDCardProvider.GhanaCardCustomerDataRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.IDCardProvider.SuccessIDCardMessage>}
 *     Promise that resolves to the response
 */
proto.IDCardProvider.IDCardProviderSvcPromiseClient.prototype.ghanacardSubmitCustomerData =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/IDCardProvider.IDCardProviderSvc/GhanacardSubmitCustomerData',
      request,
      metadata || {},
      methodDescriptor_IDCardProviderSvc_GhanacardSubmitCustomerData);
};


module.exports = proto.IDCardProvider;


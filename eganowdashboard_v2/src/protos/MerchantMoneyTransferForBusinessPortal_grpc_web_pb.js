/**
 * @fileoverview gRPC-Web generated client stub for MerchantMoneyTransferForBusinessPortal
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.3
// source: MerchantMoneyTransferForBusinessPortal.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.MerchantMoneyTransferForBusinessPortal = require('./MerchantMoneyTransferForBusinessPortal_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkInitailTransDataRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkInitailTransDataResponseMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_PostCollectionMerchantTransactionThroughPaymentLinkInitialData = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransactionThroughPaymentLinkInitialData',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkInitailTransDataRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkInitailTransDataResponseMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkInitailTransDataRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkInitailTransDataResponseMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkInitailTransDataRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkInitailTransDataResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkInitailTransDataResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.postCollectionMerchantTransactionThroughPaymentLinkInitialData =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransactionThroughPaymentLinkInitialData',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_PostCollectionMerchantTransactionThroughPaymentLinkInitialData,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkInitailTransDataRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkInitailTransDataResponseMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.postCollectionMerchantTransactionThroughPaymentLinkInitialData =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransactionThroughPaymentLinkInitialData',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_PostCollectionMerchantTransactionThroughPaymentLinkInitialData);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkTransRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkTransResponseMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_PostCollectionMerchantTransactionThroughPaymentLink = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransactionThroughPaymentLink',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkTransRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkTransResponseMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkTransRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkTransResponseMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkTransRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkTransResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkTransResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.postCollectionMerchantTransactionThroughPaymentLink =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransactionThroughPaymentLink',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_PostCollectionMerchantTransactionThroughPaymentLink,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkTransRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentByLinkTransResponseMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.postCollectionMerchantTransactionThroughPaymentLink =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransactionThroughPaymentLink',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_PostCollectionMerchantTransactionThroughPaymentLink);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.BillPaymentTransRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_PostCollectionMerchantTransaction = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransaction',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.BillPaymentTransRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.BillPaymentTransRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.BillPaymentTransRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.postCollectionMerchantTransaction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransaction',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_PostCollectionMerchantTransaction,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.BillPaymentTransRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.postCollectionMerchantTransaction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransaction',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_PostCollectionMerchantTransaction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.BillPaymentTransRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_PostPayoutMerchantTransaction = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostPayoutMerchantTransaction',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.BillPaymentTransRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.BillPaymentTransRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.BillPaymentTransRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.postPayoutMerchantTransaction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostPayoutMerchantTransaction',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_PostPayoutMerchantTransaction,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.BillPaymentTransRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.postPayoutMerchantTransaction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostPayoutMerchantTransaction',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_PostPayoutMerchantTransaction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.TransStatusRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.TransStatusResponseMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetTransactionStatus = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetTransactionStatus',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.TransStatusRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.TransStatusResponseMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.TransStatusRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.TransStatusResponseMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.TransStatusRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.TransStatusResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.TransStatusResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.getTransactionStatus =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetTransactionStatus',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetTransactionStatus,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.TransStatusRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.TransStatusResponseMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.getTransactionStatus =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetTransactionStatus',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetTransactionStatus);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.BillPaymentCountryMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceAccountBalListMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceAccountBalance = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountBalance',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.BillPaymentCountryMessage,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceAccountBalListMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.BillPaymentCountryMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceAccountBalListMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.BillPaymentCountryMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceAccountBalListMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceAccountBalListMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.getMerchantServiceAccountBalance =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountBalance',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceAccountBalance,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.BillPaymentCountryMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceAccountBalListMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.getMerchantServiceAccountBalance =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountBalance',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceAccountBalance);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantServicesRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceAccountBalListMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceAccountBalanceByServiceId = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountBalanceByServiceId',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantServicesRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceAccountBalListMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantServicesRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceAccountBalListMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantServicesRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceAccountBalListMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceAccountBalListMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.getMerchantServiceAccountBalanceByServiceId =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountBalanceByServiceId',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceAccountBalanceByServiceId,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantServicesRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceAccountBalListMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.getMerchantServiceAccountBalanceByServiceId =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountBalanceByServiceId',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceAccountBalanceByServiceId);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransListMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceAccountTrans = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountTrans',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransListMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransListMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransListMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransListMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.getMerchantServiceAccountTrans =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountTrans',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceAccountTrans,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransListMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.getMerchantServiceAccountTrans =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountTrans',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceAccountTrans);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceStatementListResponseMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceAccountStatement = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountStatement',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceStatementListResponseMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceStatementListResponseMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceStatementListResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceStatementListResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.getMerchantServiceAccountStatement =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountStatement',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceAccountStatement,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceStatementListResponseMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.getMerchantServiceAccountStatement =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountStatement',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceAccountStatement);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransListMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceAccountToAccountTrans = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountToAccountTrans',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransListMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransListMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransListMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransListMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.getMerchantServiceAccountToAccountTrans =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountToAccountTrans',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceAccountToAccountTrans,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.MerchantServiceTransListMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.getMerchantServiceAccountToAccountTrans =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountToAccountTrans',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceAccountToAccountTrans);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantInternalFundTransferInitRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_MerchantServiceInternalFundTransfer = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundTransfer',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantInternalFundTransferInitRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantInternalFundTransferInitRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantInternalFundTransferInitRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.merchantServiceInternalFundTransfer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundTransfer',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_MerchantServiceInternalFundTransfer,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantInternalFundTransferInitRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.merchantServiceInternalFundTransfer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundTransfer',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_MerchantServiceInternalFundTransfer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferPendingRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferTransListResponseMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceFundTransferPendingTransactions = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceFundTransferPendingTransactions',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferPendingRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferTransListResponseMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferPendingRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferTransListResponseMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferPendingRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferTransListResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferTransListResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.getMerchantServiceFundTransferPendingTransactions =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceFundTransferPendingTransactions',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceFundTransferPendingTransactions,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferPendingRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferTransListResponseMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.getMerchantServiceFundTransferPendingTransactions =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceFundTransferPendingTransactions',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServiceFundTransferPendingTransactions);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferApprovalRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_MerchantServiceInternalFundTransferApproval = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundTransferApproval',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferApprovalRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferApprovalRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferApprovalRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.merchantServiceInternalFundTransferApproval =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundTransferApproval',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_MerchantServiceInternalFundTransferApproval,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferApprovalRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.merchantServiceInternalFundTransferApproval =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundTransferApproval',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_MerchantServiceInternalFundTransferApproval);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantTransRetryRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_MerchantTranRetryOnBusinessPortal = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantTranRetryOnBusinessPortal',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantTransRetryRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantTransRetryRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantTransRetryRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.merchantTranRetryOnBusinessPortal =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantTranRetryOnBusinessPortal',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_MerchantTranRetryOnBusinessPortal,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantTransRetryRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.merchantTranRetryOnBusinessPortal =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantTranRetryOnBusinessPortal',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_MerchantTranRetryOnBusinessPortal);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferHistoryRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferTransHistoryListResponseMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_MerchantServiceInternalFundHistory = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundHistory',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferHistoryRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferTransHistoryListResponseMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferHistoryRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferTransHistoryListResponseMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferHistoryRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferTransHistoryListResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferTransHistoryListResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.merchantServiceInternalFundHistory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundHistory',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_MerchantServiceInternalFundHistory,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferHistoryRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.MerchantFundTransferTransHistoryListResponseMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.merchantServiceInternalFundHistory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundHistory',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_MerchantServiceInternalFundHistory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.BillPaymentCountryMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantServicesListResponseMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServicesByCustomerGuidList = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServicesByCustomerGuidList',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.BillPaymentCountryMessage,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantServicesListResponseMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.BillPaymentCountryMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.MerchantServicesListResponseMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.BillPaymentCountryMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.MerchantServicesListResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.MerchantServicesListResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.getMerchantServicesByCustomerGuidList =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServicesByCustomerGuidList',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServicesByCustomerGuidList,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.BillPaymentCountryMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.MerchantServicesListResponseMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.getMerchantServicesByCustomerGuidList =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServicesByCustomerGuidList',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantServicesByCustomerGuidList);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentInitialTransDataRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentInitialTransDataResponseMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantPaymentLinkInitialTransData = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantPaymentLinkInitialTransData',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentInitialTransDataRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentInitialTransDataResponseMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentInitialTransDataRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentInitialTransDataResponseMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentInitialTransDataRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentInitialTransDataResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentInitialTransDataResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.getMerchantPaymentLinkInitialTransData =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantPaymentLinkInitialTransData',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantPaymentLinkInitialTransData,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentInitialTransDataRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.MechantPaymentInitialTransDataResponseMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.getMerchantPaymentLinkInitialTransData =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantPaymentLinkInitialTransData',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantPaymentLinkInitialTransData);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantCustomerPaymentSourceAccountsRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantCustomerExistingSourceAccountsListMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetCustomerPaymentSourceAccountListForMerchantTransaction = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetCustomerPaymentSourceAccountListForMerchantTransaction',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantCustomerPaymentSourceAccountsRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantCustomerExistingSourceAccountsListMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantCustomerPaymentSourceAccountsRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.MerchantCustomerExistingSourceAccountsListMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantCustomerPaymentSourceAccountsRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.MerchantCustomerExistingSourceAccountsListMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.MerchantCustomerExistingSourceAccountsListMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.getCustomerPaymentSourceAccountListForMerchantTransaction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetCustomerPaymentSourceAccountListForMerchantTransaction',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetCustomerPaymentSourceAccountListForMerchantTransaction,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantCustomerPaymentSourceAccountsRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.MerchantCustomerExistingSourceAccountsListMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.getCustomerPaymentSourceAccountListForMerchantTransaction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetCustomerPaymentSourceAccountListForMerchantTransaction',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetCustomerPaymentSourceAccountListForMerchantTransaction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.PayLinkCountryRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.PayLinkPaymentAcctTypesAndServicesListResponseMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.PayLinkCountryRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.PayLinkPaymentAcctTypesAndServicesListResponseMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.PayLinkCountryRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.PayLinkPaymentAcctTypesAndServicesListResponseMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.PayLinkCountryRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.PayLinkPaymentAcctTypesAndServicesListResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.PayLinkPaymentAcctTypesAndServicesListResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.getPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.PayLinkCountryRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.PayLinkPaymentAcctTypesAndServicesListResponseMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.getPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.PaylinkCustomerAccountNoRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.PaylinkCustomerAccountNoResponseMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantCustomerKycForPaylinkTrans = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantCustomerKycForPaylinkTrans',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.PaylinkCustomerAccountNoRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.PaylinkCustomerAccountNoResponseMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.PaylinkCustomerAccountNoRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.PaylinkCustomerAccountNoResponseMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.PaylinkCustomerAccountNoRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.PaylinkCustomerAccountNoResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.PaylinkCustomerAccountNoResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.getMerchantCustomerKycForPaylinkTrans =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantCustomerKycForPaylinkTrans',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantCustomerKycForPaylinkTrans,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.PaylinkCustomerAccountNoRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.PaylinkCustomerAccountNoResponseMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.getMerchantCustomerKycForPaylinkTrans =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantCustomerKycForPaylinkTrans',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetMerchantCustomerKycForPaylinkTrans);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantBizCollecRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_CreateMerchantBizCollecRequest = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/CreateMerchantBizCollecRequest',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantBizCollecRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantBizCollecRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantBizCollecRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.createMerchantBizCollecRequest =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/CreateMerchantBizCollecRequest',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_CreateMerchantBizCollecRequest,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.MerchantBizCollecRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.createMerchantBizCollecRequest =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/CreateMerchantBizCollecRequest',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_CreateMerchantBizCollecRequest);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.BillPaymentEmptyMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.MerchantBizCollecListResponseMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetBizCollectrequestForMerchant = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetBizCollectrequestForMerchant',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.BillPaymentEmptyMessage,
  proto.MerchantMoneyTransferForBusinessPortal.MerchantBizCollecListResponseMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.BillPaymentEmptyMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.MerchantBizCollecListResponseMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.BillPaymentEmptyMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.MerchantBizCollecListResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.MerchantBizCollecListResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.getBizCollectrequestForMerchant =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetBizCollectrequestForMerchant',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetBizCollectrequestForMerchant,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.BillPaymentEmptyMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.MerchantBizCollecListResponseMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.getBizCollectrequestForMerchant =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetBizCollectrequestForMerchant',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetBizCollectrequestForMerchant);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.PaymentLinkListRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.PaymentLinksForAMerchantRspenseDataListMessage>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetPaymentLinkListForMerchant = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetPaymentLinkListForMerchant',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.PaymentLinkListRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.PaymentLinksForAMerchantRspenseDataListMessage,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.PaymentLinkListRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.PaymentLinksForAMerchantRspenseDataListMessage.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.PaymentLinkListRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.PaymentLinksForAMerchantRspenseDataListMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.PaymentLinksForAMerchantRspenseDataListMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.getPaymentLinkListForMerchant =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetPaymentLinkListForMerchant',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetPaymentLinkListForMerchant,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.PaymentLinkListRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.PaymentLinksForAMerchantRspenseDataListMessage>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.getPaymentLinkListForMerchant =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetPaymentLinkListForMerchant',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_GetPaymentLinkListForMerchant);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MerchantMoneyTransferForBusinessPortal.PaymentLinkRefNoDataRequestMessage,
 *   !proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>}
 */
const methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_DeactivatePaymentLink = new grpc.web.MethodDescriptor(
  '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/DeactivatePaymentLink',
  grpc.web.MethodType.UNARY,
  proto.MerchantMoneyTransferForBusinessPortal.PaymentLinkRefNoDataRequestMessage,
  proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans,
  /**
   * @param {!proto.MerchantMoneyTransferForBusinessPortal.PaymentLinkRefNoDataRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans.deserializeBinary
);


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.PaymentLinkRefNoDataRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>|undefined}
 *     The XHR Node Readable Stream
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcClient.prototype.deactivatePaymentLink =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/DeactivatePaymentLink',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_DeactivatePaymentLink,
      callback);
};


/**
 * @param {!proto.MerchantMoneyTransferForBusinessPortal.PaymentLinkRefNoDataRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MerchantMoneyTransferForBusinessPortal.SuccessMessageMerchantTrans>}
 *     Promise that resolves to the response
 */
proto.MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvcPromiseClient.prototype.deactivatePaymentLink =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/DeactivatePaymentLink',
      request,
      metadata || {},
      methodDescriptor_MerchantMoneyTransferForBusinessPortalSvc_DeactivatePaymentLink);
};


module.exports = proto.MerchantMoneyTransferForBusinessPortal;


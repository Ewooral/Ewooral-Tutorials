/**
 * @fileoverview gRPC-Web generated client stub for Customer
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.3
// source: Customer.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.Customer = require('./Customer_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.Customer.CustomerAccountClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.Customer.CustomerAccountPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.CustomerTempOTRequestMessage,
 *   !proto.Customer.SuccessMessage>}
 */
const methodDescriptor_CustomerAccount_CreateCustomerGenerateOTP = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/CreateCustomerGenerateOTP',
  grpc.web.MethodType.UNARY,
  proto.Customer.CustomerTempOTRequestMessage,
  proto.Customer.SuccessMessage,
  /**
   * @param {!proto.Customer.CustomerTempOTRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.SuccessMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.CustomerTempOTRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.SuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.SuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.createCustomerGenerateOTP =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/CreateCustomerGenerateOTP',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_CreateCustomerGenerateOTP,
      callback);
};


/**
 * @param {!proto.Customer.CustomerTempOTRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.SuccessMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.createCustomerGenerateOTP =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/CreateCustomerGenerateOTP',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_CreateCustomerGenerateOTP);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.CustomerTempVerifyOTRequestMessage,
 *   !proto.Customer.SuccessMessage>}
 */
const methodDescriptor_CustomerAccount_CreateCustomerVerifyOTP = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/CreateCustomerVerifyOTP',
  grpc.web.MethodType.UNARY,
  proto.Customer.CustomerTempVerifyOTRequestMessage,
  proto.Customer.SuccessMessage,
  /**
   * @param {!proto.Customer.CustomerTempVerifyOTRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.SuccessMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.CustomerTempVerifyOTRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.SuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.SuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.createCustomerVerifyOTP =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/CreateCustomerVerifyOTP',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_CreateCustomerVerifyOTP,
      callback);
};


/**
 * @param {!proto.Customer.CustomerTempVerifyOTRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.SuccessMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.createCustomerVerifyOTP =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/CreateCustomerVerifyOTP',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_CreateCustomerVerifyOTP);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.CustomerAccountMessage,
 *   !proto.Customer.LoginResponseMessage>}
 */
const methodDescriptor_CustomerAccount_CreateCustomerAccount = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/CreateCustomerAccount',
  grpc.web.MethodType.UNARY,
  proto.Customer.CustomerAccountMessage,
  proto.Customer.LoginResponseMessage,
  /**
   * @param {!proto.Customer.CustomerAccountMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.LoginResponseMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.CustomerAccountMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.LoginResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.LoginResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.createCustomerAccount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/CreateCustomerAccount',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_CreateCustomerAccount,
      callback);
};


/**
 * @param {!proto.Customer.CustomerAccountMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.LoginResponseMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.createCustomerAccount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/CreateCustomerAccount',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_CreateCustomerAccount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.LoginRequestMessage,
 *   !proto.Customer.LoginResponseMessage>}
 */
const methodDescriptor_CustomerAccount_LoginUser = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/LoginUser',
  grpc.web.MethodType.UNARY,
  proto.Customer.LoginRequestMessage,
  proto.Customer.LoginResponseMessage,
  /**
   * @param {!proto.Customer.LoginRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.LoginResponseMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.LoginRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.LoginResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.LoginResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.loginUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/LoginUser',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_LoginUser,
      callback);
};


/**
 * @param {!proto.Customer.LoginRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.LoginResponseMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.loginUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/LoginUser',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_LoginUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.LoginRequestMessage,
 *   !proto.Customer.LoginResponseMessage>}
 */
const methodDescriptor_CustomerAccount_LoginUserBusiness = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/LoginUserBusiness',
  grpc.web.MethodType.UNARY,
  proto.Customer.LoginRequestMessage,
  proto.Customer.LoginResponseMessage,
  /**
   * @param {!proto.Customer.LoginRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.LoginResponseMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.LoginRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.LoginResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.LoginResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.loginUserBusiness =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/LoginUserBusiness',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_LoginUserBusiness,
      callback);
};


/**
 * @param {!proto.Customer.LoginRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.LoginResponseMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.loginUserBusiness =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/LoginUserBusiness',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_LoginUserBusiness);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.CustomerResetPasswordRequestMessage,
 *   !proto.Customer.SuccessMessage>}
 */
const methodDescriptor_CustomerAccount_ResetUserPassword = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/ResetUserPassword',
  grpc.web.MethodType.UNARY,
  proto.Customer.CustomerResetPasswordRequestMessage,
  proto.Customer.SuccessMessage,
  /**
   * @param {!proto.Customer.CustomerResetPasswordRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.SuccessMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.CustomerResetPasswordRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.SuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.SuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.resetUserPassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/ResetUserPassword',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_ResetUserPassword,
      callback);
};


/**
 * @param {!proto.Customer.CustomerResetPasswordRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.SuccessMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.resetUserPassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/ResetUserPassword',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_ResetUserPassword);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.CustomerPasswordResetRequestMessage,
 *   !proto.Customer.SuccessMessage>}
 */
const methodDescriptor_CustomerAccount_ResetUserPassword_ForgotPassword = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/ResetUserPassword_ForgotPassword',
  grpc.web.MethodType.UNARY,
  proto.Customer.CustomerPasswordResetRequestMessage,
  proto.Customer.SuccessMessage,
  /**
   * @param {!proto.Customer.CustomerPasswordResetRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.SuccessMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.CustomerPasswordResetRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.SuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.SuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.resetUserPassword_ForgotPassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/ResetUserPassword_ForgotPassword',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_ResetUserPassword_ForgotPassword,
      callback);
};


/**
 * @param {!proto.Customer.CustomerPasswordResetRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.SuccessMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.resetUserPassword_ForgotPassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/ResetUserPassword_ForgotPassword',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_ResetUserPassword_ForgotPassword);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.CustomerPINResetRequestMessage,
 *   !proto.Customer.SuccessMessage>}
 */
const methodDescriptor_CustomerAccount_ResetUserPIN = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/ResetUserPIN',
  grpc.web.MethodType.UNARY,
  proto.Customer.CustomerPINResetRequestMessage,
  proto.Customer.SuccessMessage,
  /**
   * @param {!proto.Customer.CustomerPINResetRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.SuccessMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.CustomerPINResetRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.SuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.SuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.resetUserPIN =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/ResetUserPIN',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_ResetUserPIN,
      callback);
};


/**
 * @param {!proto.Customer.CustomerPINResetRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.SuccessMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.resetUserPIN =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/ResetUserPIN',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_ResetUserPIN);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.CustomerPINResetRequestMessageOld,
 *   !proto.Customer.SuccessMessage>}
 */
const methodDescriptor_CustomerAccount_ResetUserPIN_ForgotPIN = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/ResetUserPIN_ForgotPIN',
  grpc.web.MethodType.UNARY,
  proto.Customer.CustomerPINResetRequestMessageOld,
  proto.Customer.SuccessMessage,
  /**
   * @param {!proto.Customer.CustomerPINResetRequestMessageOld} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.SuccessMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.CustomerPINResetRequestMessageOld} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.SuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.SuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.resetUserPIN_ForgotPIN =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/ResetUserPIN_ForgotPIN',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_ResetUserPIN_ForgotPIN,
      callback);
};


/**
 * @param {!proto.Customer.CustomerPINResetRequestMessageOld} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.SuccessMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.resetUserPIN_ForgotPIN =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/ResetUserPIN_ForgotPIN',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_ResetUserPIN_ForgotPIN);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.OTRequestMessage,
 *   !proto.Customer.SuccessMessage>}
 */
const methodDescriptor_CustomerAccount_GenerateOTPBeforeLogin = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/GenerateOTPBeforeLogin',
  grpc.web.MethodType.UNARY,
  proto.Customer.OTRequestMessage,
  proto.Customer.SuccessMessage,
  /**
   * @param {!proto.Customer.OTRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.SuccessMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.OTRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.SuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.SuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.generateOTPBeforeLogin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/GenerateOTPBeforeLogin',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_GenerateOTPBeforeLogin,
      callback);
};


/**
 * @param {!proto.Customer.OTRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.SuccessMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.generateOTPBeforeLogin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/GenerateOTPBeforeLogin',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_GenerateOTPBeforeLogin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.VerifyOTPRequestMessage,
 *   !proto.Customer.SuccessMessage>}
 */
const methodDescriptor_CustomerAccount_VerifyTransOTPNow = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/VerifyTransOTPNow',
  grpc.web.MethodType.UNARY,
  proto.Customer.VerifyOTPRequestMessage,
  proto.Customer.SuccessMessage,
  /**
   * @param {!proto.Customer.VerifyOTPRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.SuccessMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.VerifyOTPRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.SuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.SuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.verifyTransOTPNow =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/VerifyTransOTPNow',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_VerifyTransOTPNow,
      callback);
};


/**
 * @param {!proto.Customer.VerifyOTPRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.SuccessMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.verifyTransOTPNow =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/VerifyTransOTPNow',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_VerifyTransOTPNow);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.VerifyOTPRequestMessage,
 *   !proto.Customer.SuccessMessage>}
 */
const methodDescriptor_CustomerAccount_CustomerProfileUpdate = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/CustomerProfileUpdate',
  grpc.web.MethodType.UNARY,
  proto.Customer.VerifyOTPRequestMessage,
  proto.Customer.SuccessMessage,
  /**
   * @param {!proto.Customer.VerifyOTPRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.SuccessMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.VerifyOTPRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.SuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.SuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.customerProfileUpdate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/CustomerProfileUpdate',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_CustomerProfileUpdate,
      callback);
};


/**
 * @param {!proto.Customer.VerifyOTPRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.SuccessMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.customerProfileUpdate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/CustomerProfileUpdate',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_CustomerProfileUpdate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.EmptyMessage,
 *   !proto.Customer.CountryListMessage>}
 */
const methodDescriptor_CustomerAccount_GetEganowSignupCountryList = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/GetEganowSignupCountryList',
  grpc.web.MethodType.UNARY,
  proto.Customer.EmptyMessage,
  proto.Customer.CountryListMessage,
  /**
   * @param {!proto.Customer.EmptyMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.CountryListMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.EmptyMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.CountryListMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.CountryListMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.getEganowSignupCountryList =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/GetEganowSignupCountryList',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_GetEganowSignupCountryList,
      callback);
};


/**
 * @param {!proto.Customer.EmptyMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.CountryListMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.getEganowSignupCountryList =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/GetEganowSignupCountryList',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_GetEganowSignupCountryList);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.BusinessUserMessage,
 *   !proto.Customer.SuccessMessage>}
 */
const methodDescriptor_CustomerAccount_CreateOtherBusinessUser = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/CreateOtherBusinessUser',
  grpc.web.MethodType.UNARY,
  proto.Customer.BusinessUserMessage,
  proto.Customer.SuccessMessage,
  /**
   * @param {!proto.Customer.BusinessUserMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.SuccessMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.BusinessUserMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.SuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.SuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.createOtherBusinessUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/CreateOtherBusinessUser',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_CreateOtherBusinessUser,
      callback);
};


/**
 * @param {!proto.Customer.BusinessUserMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.SuccessMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.createOtherBusinessUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/CreateOtherBusinessUser',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_CreateOtherBusinessUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.BizUserSearchRequestMessage,
 *   !proto.Customer.BusinessUserResponseListMessage>}
 */
const methodDescriptor_CustomerAccount_GetAllOtherBusinessUserByCustomer = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/GetAllOtherBusinessUserByCustomer',
  grpc.web.MethodType.UNARY,
  proto.Customer.BizUserSearchRequestMessage,
  proto.Customer.BusinessUserResponseListMessage,
  /**
   * @param {!proto.Customer.BizUserSearchRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.BusinessUserResponseListMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.BizUserSearchRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.BusinessUserResponseListMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.BusinessUserResponseListMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.getAllOtherBusinessUserByCustomer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/GetAllOtherBusinessUserByCustomer',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_GetAllOtherBusinessUserByCustomer,
      callback);
};


/**
 * @param {!proto.Customer.BizUserSearchRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.BusinessUserResponseListMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.getAllOtherBusinessUserByCustomer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/GetAllOtherBusinessUserByCustomer',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_GetAllOtherBusinessUserByCustomer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.BizUserToApproveMessage,
 *   !proto.Customer.SuccessMessage>}
 */
const methodDescriptor_CustomerAccount_ApproveNewOtherBusinessUser = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/ApproveNewOtherBusinessUser',
  grpc.web.MethodType.UNARY,
  proto.Customer.BizUserToApproveMessage,
  proto.Customer.SuccessMessage,
  /**
   * @param {!proto.Customer.BizUserToApproveMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.SuccessMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.BizUserToApproveMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.SuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.SuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.approveNewOtherBusinessUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/ApproveNewOtherBusinessUser',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_ApproveNewOtherBusinessUser,
      callback);
};


/**
 * @param {!proto.Customer.BizUserToApproveMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.SuccessMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.approveNewOtherBusinessUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/ApproveNewOtherBusinessUser',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_ApproveNewOtherBusinessUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.BizUserToApproveMessage,
 *   !proto.Customer.SuccessMessage>}
 */
const methodDescriptor_CustomerAccount_DisapproveApproveOtherBusinessUser = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/DisapproveApproveOtherBusinessUser',
  grpc.web.MethodType.UNARY,
  proto.Customer.BizUserToApproveMessage,
  proto.Customer.SuccessMessage,
  /**
   * @param {!proto.Customer.BizUserToApproveMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.SuccessMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.BizUserToApproveMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.SuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.SuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.disapproveApproveOtherBusinessUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/DisapproveApproveOtherBusinessUser',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_DisapproveApproveOtherBusinessUser,
      callback);
};


/**
 * @param {!proto.Customer.BizUserToApproveMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.SuccessMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.disapproveApproveOtherBusinessUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/DisapproveApproveOtherBusinessUser',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_DisapproveApproveOtherBusinessUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.LanguageOnlyMessage,
 *   !proto.Customer.CustomerSecurityQuestionsList>}
 */
const methodDescriptor_CustomerAccount_GetAllSecurityQuestions = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/GetAllSecurityQuestions',
  grpc.web.MethodType.UNARY,
  proto.Customer.LanguageOnlyMessage,
  proto.Customer.CustomerSecurityQuestionsList,
  /**
   * @param {!proto.Customer.LanguageOnlyMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.CustomerSecurityQuestionsList.deserializeBinary
);


/**
 * @param {!proto.Customer.LanguageOnlyMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.CustomerSecurityQuestionsList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.CustomerSecurityQuestionsList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.getAllSecurityQuestions =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/GetAllSecurityQuestions',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_GetAllSecurityQuestions,
      callback);
};


/**
 * @param {!proto.Customer.LanguageOnlyMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.CustomerSecurityQuestionsList>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.getAllSecurityQuestions =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/GetAllSecurityQuestions',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_GetAllSecurityQuestions);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.CustomerSecurityQuestionsForUpdateMessage,
 *   !proto.Customer.SuccessMessage>}
 */
const methodDescriptor_CustomerAccount_UpdateCustomerSecurityQuestions = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/UpdateCustomerSecurityQuestions',
  grpc.web.MethodType.UNARY,
  proto.Customer.CustomerSecurityQuestionsForUpdateMessage,
  proto.Customer.SuccessMessage,
  /**
   * @param {!proto.Customer.CustomerSecurityQuestionsForUpdateMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.SuccessMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.CustomerSecurityQuestionsForUpdateMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.SuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.SuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.updateCustomerSecurityQuestions =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/UpdateCustomerSecurityQuestions',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_UpdateCustomerSecurityQuestions,
      callback);
};


/**
 * @param {!proto.Customer.CustomerSecurityQuestionsForUpdateMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.SuccessMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.updateCustomerSecurityQuestions =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/UpdateCustomerSecurityQuestions',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_UpdateCustomerSecurityQuestions);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.CustomerToGetSecurityQuestionForVerificationRequestMessage,
 *   !proto.Customer.CustomerToGetSecurityQuestionForVerificationResponseMessage>}
 */
const methodDescriptor_CustomerAccount_GetCustomerSecurityQuestionForVerification = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/GetCustomerSecurityQuestionForVerification',
  grpc.web.MethodType.UNARY,
  proto.Customer.CustomerToGetSecurityQuestionForVerificationRequestMessage,
  proto.Customer.CustomerToGetSecurityQuestionForVerificationResponseMessage,
  /**
   * @param {!proto.Customer.CustomerToGetSecurityQuestionForVerificationRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.CustomerToGetSecurityQuestionForVerificationResponseMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.CustomerToGetSecurityQuestionForVerificationRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.CustomerToGetSecurityQuestionForVerificationResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.CustomerToGetSecurityQuestionForVerificationResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.getCustomerSecurityQuestionForVerification =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/GetCustomerSecurityQuestionForVerification',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_GetCustomerSecurityQuestionForVerification,
      callback);
};


/**
 * @param {!proto.Customer.CustomerToGetSecurityQuestionForVerificationRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.CustomerToGetSecurityQuestionForVerificationResponseMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.getCustomerSecurityQuestionForVerification =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/GetCustomerSecurityQuestionForVerification',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_GetCustomerSecurityQuestionForVerification);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.CustomerSecurityQuestionToVerifyRequestMessage,
 *   !proto.Customer.SuccessMessage>}
 */
const methodDescriptor_CustomerAccount_VerifyCustomerSecurityAnswer = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/VerifyCustomerSecurityAnswer',
  grpc.web.MethodType.UNARY,
  proto.Customer.CustomerSecurityQuestionToVerifyRequestMessage,
  proto.Customer.SuccessMessage,
  /**
   * @param {!proto.Customer.CustomerSecurityQuestionToVerifyRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.SuccessMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.CustomerSecurityQuestionToVerifyRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.SuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.SuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.verifyCustomerSecurityAnswer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/VerifyCustomerSecurityAnswer',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_VerifyCustomerSecurityAnswer,
      callback);
};


/**
 * @param {!proto.Customer.CustomerSecurityQuestionToVerifyRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.SuccessMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.verifyCustomerSecurityAnswer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/VerifyCustomerSecurityAnswer',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_VerifyCustomerSecurityAnswer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.ValidateAnswerAndPinRequestMessage,
 *   !proto.Customer.SuccessMessage>}
 */
const methodDescriptor_CustomerAccount_ValidateCustomerSecurityAnswerAndSixDigitPin = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/ValidateCustomerSecurityAnswerAndSixDigitPin',
  grpc.web.MethodType.UNARY,
  proto.Customer.ValidateAnswerAndPinRequestMessage,
  proto.Customer.SuccessMessage,
  /**
   * @param {!proto.Customer.ValidateAnswerAndPinRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.SuccessMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.ValidateAnswerAndPinRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.SuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.SuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.validateCustomerSecurityAnswerAndSixDigitPin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/ValidateCustomerSecurityAnswerAndSixDigitPin',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_ValidateCustomerSecurityAnswerAndSixDigitPin,
      callback);
};


/**
 * @param {!proto.Customer.ValidateAnswerAndPinRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.SuccessMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.validateCustomerSecurityAnswerAndSixDigitPin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/ValidateCustomerSecurityAnswerAndSixDigitPin',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_ValidateCustomerSecurityAnswerAndSixDigitPin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Customer.ValidateAnswerAndPasswordRequestMessage,
 *   !proto.Customer.SuccessMessage>}
 */
const methodDescriptor_CustomerAccount_ValidateCustomerSecurityAnswerAndPassword = new grpc.web.MethodDescriptor(
  '/Customer.CustomerAccount/ValidateCustomerSecurityAnswerAndPassword',
  grpc.web.MethodType.UNARY,
  proto.Customer.ValidateAnswerAndPasswordRequestMessage,
  proto.Customer.SuccessMessage,
  /**
   * @param {!proto.Customer.ValidateAnswerAndPasswordRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Customer.SuccessMessage.deserializeBinary
);


/**
 * @param {!proto.Customer.ValidateAnswerAndPasswordRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Customer.SuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Customer.SuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.Customer.CustomerAccountClient.prototype.validateCustomerSecurityAnswerAndPassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Customer.CustomerAccount/ValidateCustomerSecurityAnswerAndPassword',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_ValidateCustomerSecurityAnswerAndPassword,
      callback);
};


/**
 * @param {!proto.Customer.ValidateAnswerAndPasswordRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Customer.SuccessMessage>}
 *     Promise that resolves to the response
 */
proto.Customer.CustomerAccountPromiseClient.prototype.validateCustomerSecurityAnswerAndPassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Customer.CustomerAccount/ValidateCustomerSecurityAnswerAndPassword',
      request,
      metadata || {},
      methodDescriptor_CustomerAccount_ValidateCustomerSecurityAnswerAndPassword);
};


module.exports = proto.Customer;


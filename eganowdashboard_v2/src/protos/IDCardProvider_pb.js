// source: IDCardProvider.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.IDCardProvider.CountryIdCardRequestMessage', null, global);
goog.exportSymbol('proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage', null, global);
goog.exportSymbol('proto.IDCardProvider.EmptyIDCardProviderMessage', null, global);
goog.exportSymbol('proto.IDCardProvider.GhanaCardCustomerDataRequestMessage', null, global);
goog.exportSymbol('proto.IDCardProvider.GhanaCardCustomerDataResponseMessage', null, global);
goog.exportSymbol('proto.IDCardProvider.IDCardDataRequestMessage', null, global);
goog.exportSymbol('proto.IDCardProvider.IDCardProviderCredRequestMessage', null, global);
goog.exportSymbol('proto.IDCardProvider.IDCardProviderCredResponseMessage', null, global);
goog.exportSymbol('proto.IDCardProvider.IDCardProvidersListResponseMessage', null, global);
goog.exportSymbol('proto.IDCardProvider.IDCardProvidersResponseMessage', null, global);
goog.exportSymbol('proto.IDCardProvider.IdCardAccessTokenResponseMessage', null, global);
goog.exportSymbol('proto.IDCardProvider.IdCardCountryRequestMessage', null, global);
goog.exportSymbol('proto.IDCardProvider.IdCardReviewedDataMessage', null, global);
goog.exportSymbol('proto.IDCardProvider.LanguageIdCardRequestMessage', null, global);
goog.exportSymbol('proto.IDCardProvider.SuccessIDCardMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IDCardProvider.LanguageIdCardRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IDCardProvider.LanguageIdCardRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IDCardProvider.LanguageIdCardRequestMessage.displayName = 'proto.IDCardProvider.LanguageIdCardRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IDCardProvider.SuccessIDCardMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IDCardProvider.SuccessIDCardMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IDCardProvider.SuccessIDCardMessage.displayName = 'proto.IDCardProvider.SuccessIDCardMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IDCardProvider.CountryIdCardRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IDCardProvider.CountryIdCardRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IDCardProvider.CountryIdCardRequestMessage.displayName = 'proto.IDCardProvider.CountryIdCardRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IDCardProvider.EmptyIDCardProviderMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IDCardProvider.EmptyIDCardProviderMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IDCardProvider.EmptyIDCardProviderMessage.displayName = 'proto.IDCardProvider.EmptyIDCardProviderMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IDCardProvider.IDCardProvidersResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IDCardProvider.IDCardProvidersResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IDCardProvider.IDCardProvidersResponseMessage.displayName = 'proto.IDCardProvider.IDCardProvidersResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IDCardProvider.IDCardProvidersListResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IDCardProvider.IDCardProvidersListResponseMessage.repeatedFields_, null);
};
goog.inherits(proto.IDCardProvider.IDCardProvidersListResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IDCardProvider.IDCardProvidersListResponseMessage.displayName = 'proto.IDCardProvider.IDCardProvidersListResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IDCardProvider.IDCardProviderCredRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IDCardProvider.IDCardProviderCredRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IDCardProvider.IDCardProviderCredRequestMessage.displayName = 'proto.IDCardProvider.IDCardProviderCredRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IDCardProvider.IDCardProviderCredResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IDCardProvider.IDCardProviderCredResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IDCardProvider.IDCardProviderCredResponseMessage.displayName = 'proto.IDCardProvider.IDCardProviderCredResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IDCardProvider.IDCardDataRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IDCardProvider.IDCardDataRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IDCardProvider.IDCardDataRequestMessage.displayName = 'proto.IDCardProvider.IDCardDataRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.displayName = 'proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IDCardProvider.IdCardCountryRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IDCardProvider.IdCardCountryRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IDCardProvider.IdCardCountryRequestMessage.displayName = 'proto.IDCardProvider.IdCardCountryRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IDCardProvider.IdCardAccessTokenResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IDCardProvider.IdCardAccessTokenResponseMessage.displayName = 'proto.IDCardProvider.IdCardAccessTokenResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IDCardProvider.IdCardReviewedDataMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IDCardProvider.IdCardReviewedDataMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IDCardProvider.IdCardReviewedDataMessage.displayName = 'proto.IDCardProvider.IdCardReviewedDataMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IDCardProvider.GhanaCardCustomerDataRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.displayName = 'proto.IDCardProvider.GhanaCardCustomerDataRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IDCardProvider.GhanaCardCustomerDataResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.displayName = 'proto.IDCardProvider.GhanaCardCustomerDataResponseMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IDCardProvider.LanguageIdCardRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IDCardProvider.LanguageIdCardRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IDCardProvider.LanguageIdCardRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.LanguageIdCardRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    languageid: jspb.Message.getFieldWithDefault(msg, 51, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IDCardProvider.LanguageIdCardRequestMessage}
 */
proto.IDCardProvider.LanguageIdCardRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IDCardProvider.LanguageIdCardRequestMessage;
  return proto.IDCardProvider.LanguageIdCardRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IDCardProvider.LanguageIdCardRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IDCardProvider.LanguageIdCardRequestMessage}
 */
proto.IDCardProvider.LanguageIdCardRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IDCardProvider.LanguageIdCardRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IDCardProvider.LanguageIdCardRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IDCardProvider.LanguageIdCardRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.LanguageIdCardRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
};


/**
 * optional string languageId = 51;
 * @return {string}
 */
proto.IDCardProvider.LanguageIdCardRequestMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.LanguageIdCardRequestMessage} returns this
 */
proto.IDCardProvider.LanguageIdCardRequestMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 51, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IDCardProvider.SuccessIDCardMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IDCardProvider.SuccessIDCardMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IDCardProvider.SuccessIDCardMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.SuccessIDCardMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuccess: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    messagesuccessfulorfailed: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    registrationerrorcode: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IDCardProvider.SuccessIDCardMessage}
 */
proto.IDCardProvider.SuccessIDCardMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IDCardProvider.SuccessIDCardMessage;
  return proto.IDCardProvider.SuccessIDCardMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IDCardProvider.SuccessIDCardMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IDCardProvider.SuccessIDCardMessage}
 */
proto.IDCardProvider.SuccessIDCardMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessagesuccessfulorfailed(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegistrationerrorcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IDCardProvider.SuccessIDCardMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IDCardProvider.SuccessIDCardMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IDCardProvider.SuccessIDCardMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.SuccessIDCardMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessagesuccessfulorfailed();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRegistrationerrorcode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool isSuccess = 1;
 * @return {boolean}
 */
proto.IDCardProvider.SuccessIDCardMessage.prototype.getIssuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.IDCardProvider.SuccessIDCardMessage} returns this
 */
proto.IDCardProvider.SuccessIDCardMessage.prototype.setIssuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string messageSuccessfulOrFailed = 2;
 * @return {string}
 */
proto.IDCardProvider.SuccessIDCardMessage.prototype.getMessagesuccessfulorfailed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.SuccessIDCardMessage} returns this
 */
proto.IDCardProvider.SuccessIDCardMessage.prototype.setMessagesuccessfulorfailed = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.IDCardProvider.SuccessIDCardMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.SuccessIDCardMessage} returns this
 */
proto.IDCardProvider.SuccessIDCardMessage.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string registrationErrorCode = 4;
 * @return {string}
 */
proto.IDCardProvider.SuccessIDCardMessage.prototype.getRegistrationerrorcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.SuccessIDCardMessage} returns this
 */
proto.IDCardProvider.SuccessIDCardMessage.prototype.setRegistrationerrorcode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IDCardProvider.CountryIdCardRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IDCardProvider.CountryIdCardRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IDCardProvider.CountryIdCardRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.CountryIdCardRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    countrycode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 51, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IDCardProvider.CountryIdCardRequestMessage}
 */
proto.IDCardProvider.CountryIdCardRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IDCardProvider.CountryIdCardRequestMessage;
  return proto.IDCardProvider.CountryIdCardRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IDCardProvider.CountryIdCardRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IDCardProvider.CountryIdCardRequestMessage}
 */
proto.IDCardProvider.CountryIdCardRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IDCardProvider.CountryIdCardRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IDCardProvider.CountryIdCardRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IDCardProvider.CountryIdCardRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.CountryIdCardRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountrycode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
};


/**
 * optional string countryCode = 1;
 * @return {string}
 */
proto.IDCardProvider.CountryIdCardRequestMessage.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.CountryIdCardRequestMessage} returns this
 */
proto.IDCardProvider.CountryIdCardRequestMessage.prototype.setCountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string languageId = 51;
 * @return {string}
 */
proto.IDCardProvider.CountryIdCardRequestMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.CountryIdCardRequestMessage} returns this
 */
proto.IDCardProvider.CountryIdCardRequestMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 51, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IDCardProvider.EmptyIDCardProviderMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IDCardProvider.EmptyIDCardProviderMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IDCardProvider.EmptyIDCardProviderMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.EmptyIDCardProviderMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IDCardProvider.EmptyIDCardProviderMessage}
 */
proto.IDCardProvider.EmptyIDCardProviderMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IDCardProvider.EmptyIDCardProviderMessage;
  return proto.IDCardProvider.EmptyIDCardProviderMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IDCardProvider.EmptyIDCardProviderMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IDCardProvider.EmptyIDCardProviderMessage}
 */
proto.IDCardProvider.EmptyIDCardProviderMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IDCardProvider.EmptyIDCardProviderMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IDCardProvider.EmptyIDCardProviderMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IDCardProvider.EmptyIDCardProviderMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.EmptyIDCardProviderMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IDCardProvider.IDCardProvidersResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IDCardProvider.IDCardProvidersResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    idverifyprovidercode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    idverifyprovidername: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sdkclientid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sdkclientkey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    acceptableidtypes: jspb.Message.getFieldWithDefault(msg, 6, ""),
    providertid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    sdklevelname: jspb.Message.getFieldWithDefault(msg, 8, ""),
    idverifyproviderendpoint: jspb.Message.getFieldWithDefault(msg, 50, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IDCardProvider.IDCardProvidersResponseMessage}
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IDCardProvider.IDCardProvidersResponseMessage;
  return proto.IDCardProvider.IDCardProvidersResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IDCardProvider.IDCardProvidersResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IDCardProvider.IDCardProvidersResponseMessage}
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdverifyprovidercode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdverifyprovidername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdkclientid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdkclientkey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAcceptableidtypes(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProvidertid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdklevelname(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdverifyproviderendpoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IDCardProvider.IDCardProvidersResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IDCardProvider.IDCardProvidersResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdverifyprovidercode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIdverifyprovidername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSdkclientid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSdkclientkey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAcceptableidtypes();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getProvidertid();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getSdklevelname();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getIdverifyproviderendpoint();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
};


/**
 * optional string iDVerifyProviderCode = 2;
 * @return {string}
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.getIdverifyprovidercode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardProvidersResponseMessage} returns this
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.setIdverifyprovidercode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string iDVerifyProviderName = 3;
 * @return {string}
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.getIdverifyprovidername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardProvidersResponseMessage} returns this
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.setIdverifyprovidername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string sdkClientID = 4;
 * @return {string}
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.getSdkclientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardProvidersResponseMessage} returns this
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.setSdkclientid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sdkClientKey = 5;
 * @return {string}
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.getSdkclientkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardProvidersResponseMessage} returns this
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.setSdkclientkey = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string acceptableIdTypes = 6;
 * @return {string}
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.getAcceptableidtypes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardProvidersResponseMessage} returns this
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.setAcceptableidtypes = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 providerTid = 7;
 * @return {number}
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.getProvidertid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.IDCardProvider.IDCardProvidersResponseMessage} returns this
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.setProvidertid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string sdklevelName = 8;
 * @return {string}
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.getSdklevelname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardProvidersResponseMessage} returns this
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.setSdklevelname = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string IDVerifyProviderEndpoint = 50;
 * @return {string}
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.getIdverifyproviderendpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardProvidersResponseMessage} returns this
 */
proto.IDCardProvider.IDCardProvidersResponseMessage.prototype.setIdverifyproviderendpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 50, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IDCardProvider.IDCardProvidersListResponseMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IDCardProvider.IDCardProvidersListResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IDCardProvider.IDCardProvidersListResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IDCardProvider.IDCardProvidersListResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.IDCardProvidersListResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    idcardproviderlistList: jspb.Message.toObjectList(msg.getIdcardproviderlistList(),
    proto.IDCardProvider.IDCardProvidersResponseMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IDCardProvider.IDCardProvidersListResponseMessage}
 */
proto.IDCardProvider.IDCardProvidersListResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IDCardProvider.IDCardProvidersListResponseMessage;
  return proto.IDCardProvider.IDCardProvidersListResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IDCardProvider.IDCardProvidersListResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IDCardProvider.IDCardProvidersListResponseMessage}
 */
proto.IDCardProvider.IDCardProvidersListResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IDCardProvider.IDCardProvidersResponseMessage;
      reader.readMessage(value,proto.IDCardProvider.IDCardProvidersResponseMessage.deserializeBinaryFromReader);
      msg.addIdcardproviderlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IDCardProvider.IDCardProvidersListResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IDCardProvider.IDCardProvidersListResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IDCardProvider.IDCardProvidersListResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.IDCardProvidersListResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdcardproviderlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.IDCardProvider.IDCardProvidersResponseMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IDCardProvidersResponseMessage idCardProviderList = 1;
 * @return {!Array<!proto.IDCardProvider.IDCardProvidersResponseMessage>}
 */
proto.IDCardProvider.IDCardProvidersListResponseMessage.prototype.getIdcardproviderlistList = function() {
  return /** @type{!Array<!proto.IDCardProvider.IDCardProvidersResponseMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IDCardProvider.IDCardProvidersResponseMessage, 1));
};


/**
 * @param {!Array<!proto.IDCardProvider.IDCardProvidersResponseMessage>} value
 * @return {!proto.IDCardProvider.IDCardProvidersListResponseMessage} returns this
*/
proto.IDCardProvider.IDCardProvidersListResponseMessage.prototype.setIdcardproviderlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IDCardProvider.IDCardProvidersResponseMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IDCardProvider.IDCardProvidersResponseMessage}
 */
proto.IDCardProvider.IDCardProvidersListResponseMessage.prototype.addIdcardproviderlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IDCardProvider.IDCardProvidersResponseMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IDCardProvider.IDCardProvidersListResponseMessage} returns this
 */
proto.IDCardProvider.IDCardProvidersListResponseMessage.prototype.clearIdcardproviderlistList = function() {
  return this.setIdcardproviderlistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IDCardProvider.IDCardProviderCredRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IDCardProvider.IDCardProviderCredRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IDCardProvider.IDCardProviderCredRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.IDCardProviderCredRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    idverifyprovidercode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 50, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IDCardProvider.IDCardProviderCredRequestMessage}
 */
proto.IDCardProvider.IDCardProviderCredRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IDCardProvider.IDCardProviderCredRequestMessage;
  return proto.IDCardProvider.IDCardProviderCredRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IDCardProvider.IDCardProviderCredRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IDCardProvider.IDCardProviderCredRequestMessage}
 */
proto.IDCardProvider.IDCardProviderCredRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdverifyprovidercode(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IDCardProvider.IDCardProviderCredRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IDCardProvider.IDCardProviderCredRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IDCardProvider.IDCardProviderCredRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.IDCardProviderCredRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdverifyprovidercode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
};


/**
 * optional string IDVerifyProviderCode = 2;
 * @return {string}
 */
proto.IDCardProvider.IDCardProviderCredRequestMessage.prototype.getIdverifyprovidercode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardProviderCredRequestMessage} returns this
 */
proto.IDCardProvider.IDCardProviderCredRequestMessage.prototype.setIdverifyprovidercode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string languageId = 50;
 * @return {string}
 */
proto.IDCardProvider.IDCardProviderCredRequestMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardProviderCredRequestMessage} returns this
 */
proto.IDCardProvider.IDCardProviderCredRequestMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 50, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IDCardProvider.IDCardProviderCredResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IDCardProvider.IDCardProviderCredResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IDCardProvider.IDCardProviderCredResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.IDCardProviderCredResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    idverifyprovidercode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sdkclientid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sdkclientkey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sdklevelname: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IDCardProvider.IDCardProviderCredResponseMessage}
 */
proto.IDCardProvider.IDCardProviderCredResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IDCardProvider.IDCardProviderCredResponseMessage;
  return proto.IDCardProvider.IDCardProviderCredResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IDCardProvider.IDCardProviderCredResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IDCardProvider.IDCardProviderCredResponseMessage}
 */
proto.IDCardProvider.IDCardProviderCredResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdverifyprovidercode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdkclientid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdkclientkey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdklevelname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IDCardProvider.IDCardProviderCredResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IDCardProvider.IDCardProviderCredResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IDCardProvider.IDCardProviderCredResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.IDCardProviderCredResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdverifyprovidercode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSdkclientid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSdkclientkey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSdklevelname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string iDVerifyProviderCode = 1;
 * @return {string}
 */
proto.IDCardProvider.IDCardProviderCredResponseMessage.prototype.getIdverifyprovidercode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardProviderCredResponseMessage} returns this
 */
proto.IDCardProvider.IDCardProviderCredResponseMessage.prototype.setIdverifyprovidercode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sdkClientID = 2;
 * @return {string}
 */
proto.IDCardProvider.IDCardProviderCredResponseMessage.prototype.getSdkclientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardProviderCredResponseMessage} returns this
 */
proto.IDCardProvider.IDCardProviderCredResponseMessage.prototype.setSdkclientid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string SdkClientKey = 3;
 * @return {string}
 */
proto.IDCardProvider.IDCardProviderCredResponseMessage.prototype.getSdkclientkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardProviderCredResponseMessage} returns this
 */
proto.IDCardProvider.IDCardProviderCredResponseMessage.prototype.setSdkclientkey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string sdklevelName = 4;
 * @return {string}
 */
proto.IDCardProvider.IDCardProviderCredResponseMessage.prototype.getSdklevelname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardProviderCredResponseMessage} returns this
 */
proto.IDCardProvider.IDCardProviderCredResponseMessage.prototype.setSdklevelname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IDCardProvider.IDCardDataRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IDCardProvider.IDCardDataRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IDCardProvider.IDCardDataRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.IDCardDataRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    providerefnoorapplicantid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eganowapirequestid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mobileorweb: jspb.Message.getFieldWithDefault(msg, 3, ""),
    idverifyprovidercode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 50, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IDCardProvider.IDCardDataRequestMessage}
 */
proto.IDCardProvider.IDCardDataRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IDCardProvider.IDCardDataRequestMessage;
  return proto.IDCardProvider.IDCardDataRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IDCardProvider.IDCardDataRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IDCardProvider.IDCardDataRequestMessage}
 */
proto.IDCardProvider.IDCardDataRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProviderefnoorapplicantid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEganowapirequestid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMobileorweb(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdverifyprovidercode(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IDCardProvider.IDCardDataRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IDCardProvider.IDCardDataRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IDCardProvider.IDCardDataRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.IDCardDataRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProviderefnoorapplicantid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEganowapirequestid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMobileorweb();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIdverifyprovidercode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
};


/**
 * optional string provideRefNoOrApplicantId = 1;
 * @return {string}
 */
proto.IDCardProvider.IDCardDataRequestMessage.prototype.getProviderefnoorapplicantid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardDataRequestMessage} returns this
 */
proto.IDCardProvider.IDCardDataRequestMessage.prototype.setProviderefnoorapplicantid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string eganowApiRequestID = 2;
 * @return {string}
 */
proto.IDCardProvider.IDCardDataRequestMessage.prototype.getEganowapirequestid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardDataRequestMessage} returns this
 */
proto.IDCardProvider.IDCardDataRequestMessage.prototype.setEganowapirequestid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string mobileOrWeb = 3;
 * @return {string}
 */
proto.IDCardProvider.IDCardDataRequestMessage.prototype.getMobileorweb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardDataRequestMessage} returns this
 */
proto.IDCardProvider.IDCardDataRequestMessage.prototype.setMobileorweb = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string iDVerifyProviderCode = 4;
 * @return {string}
 */
proto.IDCardProvider.IDCardDataRequestMessage.prototype.getIdverifyprovidercode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardDataRequestMessage} returns this
 */
proto.IDCardProvider.IDCardDataRequestMessage.prototype.setIdverifyprovidercode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string languageId = 50;
 * @return {string}
 */
proto.IDCardProvider.IDCardDataRequestMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IDCardDataRequestMessage} returns this
 */
proto.IDCardProvider.IDCardDataRequestMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 50, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    kycverifystatus: jspb.Message.getFieldWithDefault(msg, 1, ""),
    idcardfullname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    idcardtype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    idcardexpirydate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    kyctypename: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage}
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage;
  return proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage}
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKycverifystatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdcardfullname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdcardtype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdcardexpirydate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setKyctypename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKycverifystatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdcardfullname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIdcardtype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIdcardexpirydate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getKyctypename();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string kycVerifyStatus = 1;
 * @return {string}
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.prototype.getKycverifystatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage} returns this
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.prototype.setKycverifystatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string iDCardFullName = 2;
 * @return {string}
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.prototype.getIdcardfullname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage} returns this
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.prototype.setIdcardfullname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string iDCardType = 3;
 * @return {string}
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.prototype.getIdcardtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage} returns this
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.prototype.setIdcardtype = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string iDCardExpiryDate = 4;
 * @return {string}
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.prototype.getIdcardexpirydate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage} returns this
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.prototype.setIdcardexpirydate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string kycTypeName = 5;
 * @return {string}
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.prototype.getKyctypename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage} returns this
 */
proto.IDCardProvider.CustomerIdCardVerifyStatusOnEganowResponseMessage.prototype.setKyctypename = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IDCardProvider.IdCardCountryRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IDCardProvider.IdCardCountryRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IDCardProvider.IdCardCountryRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.IdCardCountryRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    countrycode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    idverifyprovidercode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mobileorweb: jspb.Message.getFieldWithDefault(msg, 3, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 51, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IDCardProvider.IdCardCountryRequestMessage}
 */
proto.IDCardProvider.IdCardCountryRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IDCardProvider.IdCardCountryRequestMessage;
  return proto.IDCardProvider.IdCardCountryRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IDCardProvider.IdCardCountryRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IDCardProvider.IdCardCountryRequestMessage}
 */
proto.IDCardProvider.IdCardCountryRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdverifyprovidercode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMobileorweb(value);
      break;
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IDCardProvider.IdCardCountryRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IDCardProvider.IdCardCountryRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IDCardProvider.IdCardCountryRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.IdCardCountryRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountrycode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdverifyprovidercode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMobileorweb();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
};


/**
 * optional string countryCode = 1;
 * @return {string}
 */
proto.IDCardProvider.IdCardCountryRequestMessage.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IdCardCountryRequestMessage} returns this
 */
proto.IDCardProvider.IdCardCountryRequestMessage.prototype.setCountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string idVerifyProviderCode = 2;
 * @return {string}
 */
proto.IDCardProvider.IdCardCountryRequestMessage.prototype.getIdverifyprovidercode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IdCardCountryRequestMessage} returns this
 */
proto.IDCardProvider.IdCardCountryRequestMessage.prototype.setIdverifyprovidercode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string mobileOrWeb = 3;
 * @return {string}
 */
proto.IDCardProvider.IdCardCountryRequestMessage.prototype.getMobileorweb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IdCardCountryRequestMessage} returns this
 */
proto.IDCardProvider.IdCardCountryRequestMessage.prototype.setMobileorweb = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string languageId = 51;
 * @return {string}
 */
proto.IDCardProvider.IdCardCountryRequestMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IdCardCountryRequestMessage} returns this
 */
proto.IDCardProvider.IdCardCountryRequestMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 51, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IDCardProvider.IdCardAccessTokenResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IDCardProvider.IdCardAccessTokenResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuccess: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    countrycode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    eganowapirequestid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    idverifyprovidercode: jspb.Message.getFieldWithDefault(msg, 5, ""),
    accesstoken: jspb.Message.getFieldWithDefault(msg, 6, ""),
    providertransrefnumber: jspb.Message.getFieldWithDefault(msg, 7, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 51, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IDCardProvider.IdCardAccessTokenResponseMessage}
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IDCardProvider.IdCardAccessTokenResponseMessage;
  return proto.IDCardProvider.IdCardAccessTokenResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IDCardProvider.IdCardAccessTokenResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IDCardProvider.IdCardAccessTokenResponseMessage}
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEganowapirequestid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdverifyprovidercode(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvidertransrefnumber(value);
      break;
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IDCardProvider.IdCardAccessTokenResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IDCardProvider.IdCardAccessTokenResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCountrycode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEganowapirequestid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIdverifyprovidercode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getProvidertransrefnumber();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
};


/**
 * optional bool isSuccess = 1;
 * @return {boolean}
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.getIssuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.IDCardProvider.IdCardAccessTokenResponseMessage} returns this
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.setIssuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IdCardAccessTokenResponseMessage} returns this
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string countryCode = 3;
 * @return {string}
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IdCardAccessTokenResponseMessage} returns this
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.setCountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string EganowApiRequestId = 4;
 * @return {string}
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.getEganowapirequestid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IdCardAccessTokenResponseMessage} returns this
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.setEganowapirequestid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string idVerifyProviderCode = 5;
 * @return {string}
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.getIdverifyprovidercode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IdCardAccessTokenResponseMessage} returns this
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.setIdverifyprovidercode = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string accessToken = 6;
 * @return {string}
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IdCardAccessTokenResponseMessage} returns this
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string providerTransRefNumber = 7;
 * @return {string}
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.getProvidertransrefnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IdCardAccessTokenResponseMessage} returns this
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.setProvidertransrefnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string languageId = 51;
 * @return {string}
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IdCardAccessTokenResponseMessage} returns this
 */
proto.IDCardProvider.IdCardAccessTokenResponseMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 51, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IDCardProvider.IdCardReviewedDataMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IDCardProvider.IdCardReviewedDataMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IDCardProvider.IdCardReviewedDataMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.IdCardReviewedDataMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    eganowidreferenceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    idapprovalstatusverifiedreviewneeded: jspb.Message.getFieldWithDefault(msg, 15, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 51, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IDCardProvider.IdCardReviewedDataMessage}
 */
proto.IDCardProvider.IdCardReviewedDataMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IDCardProvider.IdCardReviewedDataMessage;
  return proto.IDCardProvider.IdCardReviewedDataMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IDCardProvider.IdCardReviewedDataMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IDCardProvider.IdCardReviewedDataMessage}
 */
proto.IDCardProvider.IdCardReviewedDataMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEganowidreferenceid(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdapprovalstatusverifiedreviewneeded(value);
      break;
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IDCardProvider.IdCardReviewedDataMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IDCardProvider.IdCardReviewedDataMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IDCardProvider.IdCardReviewedDataMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.IdCardReviewedDataMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEganowidreferenceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdapprovalstatusverifiedreviewneeded();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
};


/**
 * optional string eganowIdReferenceId = 1;
 * @return {string}
 */
proto.IDCardProvider.IdCardReviewedDataMessage.prototype.getEganowidreferenceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IdCardReviewedDataMessage} returns this
 */
proto.IDCardProvider.IdCardReviewedDataMessage.prototype.setEganowidreferenceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string idApprovalStatusVerifiedReviewNeeded = 15;
 * @return {string}
 */
proto.IDCardProvider.IdCardReviewedDataMessage.prototype.getIdapprovalstatusverifiedreviewneeded = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IdCardReviewedDataMessage} returns this
 */
proto.IDCardProvider.IdCardReviewedDataMessage.prototype.setIdapprovalstatusverifiedreviewneeded = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string languageId = 51;
 * @return {string}
 */
proto.IDCardProvider.IdCardReviewedDataMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.IdCardReviewedDataMessage} returns this
 */
proto.IDCardProvider.IdCardReviewedDataMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 51, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IDCardProvider.GhanaCardCustomerDataRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    idprovidercode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    idnumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    selfieimageinbytes: msg.getSelfieimageinbytes_asB64(),
    idimagetypepngorjpegorwsq: jspb.Message.getFieldWithDefault(msg, 4, ""),
    countrycode: jspb.Message.getFieldWithDefault(msg, 5, ""),
    mobileorweb: jspb.Message.getFieldWithDefault(msg, 8, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 51, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataRequestMessage}
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IDCardProvider.GhanaCardCustomerDataRequestMessage;
  return proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IDCardProvider.GhanaCardCustomerDataRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataRequestMessage}
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdprovidercode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdnumber(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSelfieimageinbytes(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdimagetypepngorjpegorwsq(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMobileorweb(value);
      break;
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IDCardProvider.GhanaCardCustomerDataRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdprovidercode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdnumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSelfieimageinbytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getIdimagetypepngorjpegorwsq();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCountrycode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMobileorweb();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
};


/**
 * optional string idProviderCode = 1;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.getIdprovidercode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataRequestMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.setIdprovidercode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string IdNumber = 2;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.getIdnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataRequestMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.setIdnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes selfieImageInBytes = 3;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.getSelfieimageinbytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes selfieImageInBytes = 3;
 * This is a type-conversion wrapper around `getSelfieimageinbytes()`
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.getSelfieimageinbytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSelfieimageinbytes()));
};


/**
 * optional bytes selfieImageInBytes = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSelfieimageinbytes()`
 * @return {!Uint8Array}
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.getSelfieimageinbytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSelfieimageinbytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataRequestMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.setSelfieimageinbytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string idImageTypePngOrJpegOrWSQ = 4;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.getIdimagetypepngorjpegorwsq = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataRequestMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.setIdimagetypepngorjpegorwsq = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string countryCode = 5;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataRequestMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.setCountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string mobileOrWeb = 8;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.getMobileorweb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataRequestMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.setMobileorweb = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string languageId = 51;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataRequestMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataRequestMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 51, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuccess: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    idapprovalstatusverifiedreviewneeded: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dateofbirthstr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    idcardcountrycode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    idcardfullname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    idcardno: jspb.Message.getFieldWithDefault(msg, 6, ""),
    idcardexpirydatestr: jspb.Message.getFieldWithDefault(msg, 7, ""),
    idcarddeviceused: jspb.Message.getFieldWithDefault(msg, 8, ""),
    idcardimageurl: jspb.Message.getFieldWithDefault(msg, 9, ""),
    idcardplaceofissued: jspb.Message.getFieldWithDefault(msg, 10, ""),
    idcardtype: jspb.Message.getFieldWithDefault(msg, 11, ""),
    idcardexpiredstatus: jspb.Message.getFieldWithDefault(msg, 12, ""),
    gender: jspb.Message.getFieldWithDefault(msg, 13, ""),
    idcardselfieurl: jspb.Message.getFieldWithDefault(msg, 14, ""),
    idcardvideourl: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IDCardProvider.GhanaCardCustomerDataResponseMessage;
  return proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdapprovalstatusverifiedreviewneeded(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateofbirthstr(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdcardcountrycode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdcardfullname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdcardno(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdcardexpirydatestr(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdcarddeviceused(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdcardimageurl(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdcardplaceofissued(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdcardtype(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdcardexpiredstatus(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setGender(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdcardselfieurl(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdcardvideourl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIdapprovalstatusverifiedreviewneeded();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDateofbirthstr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIdcardcountrycode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIdcardfullname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIdcardno();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIdcardexpirydatestr();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getIdcarddeviceused();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getIdcardimageurl();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIdcardplaceofissued();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIdcardtype();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIdcardexpiredstatus();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getGender();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getIdcardselfieurl();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getIdcardvideourl();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional bool IsSuccess = 1;
 * @return {boolean}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.getIssuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.setIssuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string idApprovalStatusVerifiedReviewNeeded = 2;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.getIdapprovalstatusverifiedreviewneeded = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.setIdapprovalstatusverifiedreviewneeded = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string dateOfBirthStr = 3;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.getDateofbirthstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.setDateofbirthstr = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string iDCardCountryCode = 4;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.getIdcardcountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.setIdcardcountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string iDCardFullName = 5;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.getIdcardfullname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.setIdcardfullname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string iDCardNo = 6;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.getIdcardno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.setIdcardno = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string iDCardExpiryDateStr = 7;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.getIdcardexpirydatestr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.setIdcardexpirydatestr = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string iDCardDeviceUsed = 8;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.getIdcarddeviceused = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.setIdcarddeviceused = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string iDCardImageUrl = 9;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.getIdcardimageurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.setIdcardimageurl = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string iDCardPlaceOfIssued = 10;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.getIdcardplaceofissued = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.setIdcardplaceofissued = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string iDCardType = 11;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.getIdcardtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.setIdcardtype = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string iDCardExpiredStatus = 12;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.getIdcardexpiredstatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.setIdcardexpiredstatus = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string gender = 13;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.getGender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.setGender = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string iDCardSelfieUrl = 14;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.getIdcardselfieurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.setIdcardselfieurl = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string iDCardVideoUrl = 15;
 * @return {string}
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.getIdcardvideourl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.IDCardProvider.GhanaCardCustomerDataResponseMessage} returns this
 */
proto.IDCardProvider.GhanaCardCustomerDataResponseMessage.prototype.setIdcardvideourl = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


goog.object.extend(exports, proto.IDCardProvider);

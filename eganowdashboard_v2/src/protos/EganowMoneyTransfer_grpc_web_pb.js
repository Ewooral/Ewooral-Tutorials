/**
 * @fileoverview gRPC-Web generated client stub for EganowMoneyTransfer
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.3
// source: EganowMoneyTransfer.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.EganowMoneyTransfer = require('./EganowMoneyTransfer_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.MoneyTransferRequestMessage,
 *   !proto.EganowMoneyTransfer.MoneyTransferSuccessMessage>}
 */
const methodDescriptor_EganowMoneyTransferSvc_PostMobileMoneyTransferTrans = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/PostMobileMoneyTransferTrans',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.MoneyTransferRequestMessage,
  proto.EganowMoneyTransfer.MoneyTransferSuccessMessage,
  /**
   * @param {!proto.EganowMoneyTransfer.MoneyTransferRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.MoneyTransferSuccessMessage.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.MoneyTransferRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.MoneyTransferSuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.MoneyTransferSuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.postMobileMoneyTransferTrans =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/PostMobileMoneyTransferTrans',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_PostMobileMoneyTransferTrans,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.MoneyTransferRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.MoneyTransferSuccessMessage>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.postMobileMoneyTransferTrans =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/PostMobileMoneyTransferTrans',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_PostMobileMoneyTransferTrans);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.CustomerExistingSourceAccountsRequestMessage,
 *   !proto.EganowMoneyTransfer.CustomerExistingSourceAccountsListMessage>}
 */
const methodDescriptor_EganowMoneyTransferSvc_GetCustomerExistingSourceAccountListForView = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerExistingSourceAccountListForView',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.CustomerExistingSourceAccountsRequestMessage,
  proto.EganowMoneyTransfer.CustomerExistingSourceAccountsListMessage,
  /**
   * @param {!proto.EganowMoneyTransfer.CustomerExistingSourceAccountsRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.CustomerExistingSourceAccountsListMessage.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.CustomerExistingSourceAccountsRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.CustomerExistingSourceAccountsListMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.CustomerExistingSourceAccountsListMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.getCustomerExistingSourceAccountListForView =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerExistingSourceAccountListForView',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetCustomerExistingSourceAccountListForView,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.CustomerExistingSourceAccountsRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.CustomerExistingSourceAccountsListMessage>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.getCustomerExistingSourceAccountListForView =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerExistingSourceAccountListForView',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetCustomerExistingSourceAccountListForView);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.CustomerPaymentSourceAccountsRequestMessage,
 *   !proto.EganowMoneyTransfer.CustomerExistingSourceAccountsListMessage>}
 */
const methodDescriptor_EganowMoneyTransferSvc_GetCustomerPaymentSourceAccountListForTransaction = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerPaymentSourceAccountListForTransaction',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.CustomerPaymentSourceAccountsRequestMessage,
  proto.EganowMoneyTransfer.CustomerExistingSourceAccountsListMessage,
  /**
   * @param {!proto.EganowMoneyTransfer.CustomerPaymentSourceAccountsRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.CustomerExistingSourceAccountsListMessage.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.CustomerPaymentSourceAccountsRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.CustomerExistingSourceAccountsListMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.CustomerExistingSourceAccountsListMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.getCustomerPaymentSourceAccountListForTransaction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerPaymentSourceAccountListForTransaction',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetCustomerPaymentSourceAccountListForTransaction,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.CustomerPaymentSourceAccountsRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.CustomerExistingSourceAccountsListMessage>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.getCustomerPaymentSourceAccountListForTransaction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerPaymentSourceAccountListForTransaction',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetCustomerPaymentSourceAccountListForTransaction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.CalculateTransChargeRequestMessage,
 *   !proto.EganowMoneyTransfer.CalculateTransChargeResponseMessage>}
 */
const methodDescriptor_EganowMoneyTransferSvc_CalculateMoneyTransferCharges = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/CalculateMoneyTransferCharges',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.CalculateTransChargeRequestMessage,
  proto.EganowMoneyTransfer.CalculateTransChargeResponseMessage,
  /**
   * @param {!proto.EganowMoneyTransfer.CalculateTransChargeRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.CalculateTransChargeResponseMessage.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.CalculateTransChargeRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.CalculateTransChargeResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.CalculateTransChargeResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.calculateMoneyTransferCharges =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/CalculateMoneyTransferCharges',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_CalculateMoneyTransferCharges,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.CalculateTransChargeRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.CalculateTransChargeResponseMessage>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.calculateMoneyTransferCharges =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/CalculateMoneyTransferCharges',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_CalculateMoneyTransferCharges);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerRequestMessage,
 *   !proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerResponseMessage>}
 */
const methodDescriptor_EganowMoneyTransferSvc_GetCustomerBeficiaryListByPayPartnerId = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerBeficiaryListByPayPartnerId',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerRequestMessage,
  proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerResponseMessage,
  /**
   * @param {!proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerResponseMessage.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.getCustomerBeficiaryListByPayPartnerId =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerBeficiaryListByPayPartnerId',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetCustomerBeficiaryListByPayPartnerId,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerResponseMessage>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.getCustomerBeficiaryListByPayPartnerId =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerBeficiaryListByPayPartnerId',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetCustomerBeficiaryListByPayPartnerId);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.BeneficiaryListByProviderRequestMessage,
 *   !proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerResponseMessage>}
 */
const methodDescriptor_EganowMoneyTransferSvc_GetCustomerBeficiaryListForSelectedProvider = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerBeficiaryListForSelectedProvider',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.BeneficiaryListByProviderRequestMessage,
  proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerResponseMessage,
  /**
   * @param {!proto.EganowMoneyTransfer.BeneficiaryListByProviderRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerResponseMessage.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.BeneficiaryListByProviderRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.getCustomerBeficiaryListForSelectedProvider =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerBeficiaryListForSelectedProvider',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetCustomerBeficiaryListForSelectedProvider,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.BeneficiaryListByProviderRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.BeneficiaryListByPayPartnerResponseMessage>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.getCustomerBeficiaryListForSelectedProvider =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerBeficiaryListForSelectedProvider',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetCustomerBeficiaryListForSelectedProvider);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.CustomerSourceAcctRequestMessage,
 *   !proto.EganowMoneyTransfer.MoneyTransferSuccessMessage>}
 */
const methodDescriptor_EganowMoneyTransferSvc_AddCustomerMomoBankAndMerchantSourceAccount = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerMomoBankAndMerchantSourceAccount',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.CustomerSourceAcctRequestMessage,
  proto.EganowMoneyTransfer.MoneyTransferSuccessMessage,
  /**
   * @param {!proto.EganowMoneyTransfer.CustomerSourceAcctRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.MoneyTransferSuccessMessage.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.CustomerSourceAcctRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.MoneyTransferSuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.MoneyTransferSuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.addCustomerMomoBankAndMerchantSourceAccount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerMomoBankAndMerchantSourceAccount',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_AddCustomerMomoBankAndMerchantSourceAccount,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.CustomerSourceAcctRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.MoneyTransferSuccessMessage>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.addCustomerMomoBankAndMerchantSourceAccount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerMomoBankAndMerchantSourceAccount',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_AddCustomerMomoBankAndMerchantSourceAccount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.CustomerSourceAcctCardRequestMessage,
 *   !proto.EganowMoneyTransfer.CustomerSourceAcctCardResponseMessage>}
 */
const methodDescriptor_EganowMoneyTransferSvc_AddCustomerCardSourceAccount = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerCardSourceAccount',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.CustomerSourceAcctCardRequestMessage,
  proto.EganowMoneyTransfer.CustomerSourceAcctCardResponseMessage,
  /**
   * @param {!proto.EganowMoneyTransfer.CustomerSourceAcctCardRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.CustomerSourceAcctCardResponseMessage.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.CustomerSourceAcctCardRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.CustomerSourceAcctCardResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.CustomerSourceAcctCardResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.addCustomerCardSourceAccount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerCardSourceAccount',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_AddCustomerCardSourceAccount,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.CustomerSourceAcctCardRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.CustomerSourceAcctCardResponseMessage>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.addCustomerCardSourceAccount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerCardSourceAccount',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_AddCustomerCardSourceAccount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.CustomerBeneficiaryAcctRequestMessage,
 *   !proto.EganowMoneyTransfer.MoneyTransferSuccessMessage>}
 */
const methodDescriptor_EganowMoneyTransferSvc_AddCustomerBeneficiaryAccount = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerBeneficiaryAccount',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.CustomerBeneficiaryAcctRequestMessage,
  proto.EganowMoneyTransfer.MoneyTransferSuccessMessage,
  /**
   * @param {!proto.EganowMoneyTransfer.CustomerBeneficiaryAcctRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.MoneyTransferSuccessMessage.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.CustomerBeneficiaryAcctRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.MoneyTransferSuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.MoneyTransferSuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.addCustomerBeneficiaryAccount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerBeneficiaryAccount',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_AddCustomerBeneficiaryAccount,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.CustomerBeneficiaryAcctRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.MoneyTransferSuccessMessage>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.addCustomerBeneficiaryAccount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerBeneficiaryAccount',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_AddCustomerBeneficiaryAccount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.VerifyCustomerPinMessage,
 *   !proto.EganowMoneyTransfer.IsCustomerPinValidResponseMessage>}
 */
const methodDescriptor_EganowMoneyTransferSvc_IsCustomerPinValid = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/IsCustomerPinValid',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.VerifyCustomerPinMessage,
  proto.EganowMoneyTransfer.IsCustomerPinValidResponseMessage,
  /**
   * @param {!proto.EganowMoneyTransfer.VerifyCustomerPinMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.IsCustomerPinValidResponseMessage.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.VerifyCustomerPinMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.IsCustomerPinValidResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.IsCustomerPinValidResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.isCustomerPinValid =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/IsCustomerPinValid',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_IsCustomerPinValid,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.VerifyCustomerPinMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.IsCustomerPinValidResponseMessage>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.isCustomerPinValid =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/IsCustomerPinValid',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_IsCustomerPinValid);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.VerifyCustomerPinMessage,
 *   !proto.EganowMoneyTransfer.MoneyTransferSuccessMessage>}
 */
const methodDescriptor_EganowMoneyTransferSvc_ChangeCustomerPin = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/ChangeCustomerPin',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.VerifyCustomerPinMessage,
  proto.EganowMoneyTransfer.MoneyTransferSuccessMessage,
  /**
   * @param {!proto.EganowMoneyTransfer.VerifyCustomerPinMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.MoneyTransferSuccessMessage.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.VerifyCustomerPinMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.MoneyTransferSuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.MoneyTransferSuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.changeCustomerPin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/ChangeCustomerPin',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_ChangeCustomerPin,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.VerifyCustomerPinMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.MoneyTransferSuccessMessage>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.changeCustomerPin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/ChangeCustomerPin',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_ChangeCustomerPin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.EganowBeneficiaryMobileNoRequestMessage,
 *   !proto.EganowMoneyTransfer.EganowBeneficiaryResponseMessage>}
 */
const methodDescriptor_EganowMoneyTransferSvc_GetEganowCustomerBeneficiaryByMobileNo = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetEganowCustomerBeneficiaryByMobileNo',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.EganowBeneficiaryMobileNoRequestMessage,
  proto.EganowMoneyTransfer.EganowBeneficiaryResponseMessage,
  /**
   * @param {!proto.EganowMoneyTransfer.EganowBeneficiaryMobileNoRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.EganowBeneficiaryResponseMessage.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.EganowBeneficiaryMobileNoRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.EganowBeneficiaryResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.EganowBeneficiaryResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.getEganowCustomerBeneficiaryByMobileNo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetEganowCustomerBeneficiaryByMobileNo',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetEganowCustomerBeneficiaryByMobileNo,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.EganowBeneficiaryMobileNoRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.EganowBeneficiaryResponseMessage>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.getEganowCustomerBeneficiaryByMobileNo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetEganowCustomerBeneficiaryByMobileNo',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetEganowCustomerBeneficiaryByMobileNo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.CustomerRequestMessage,
 *   !proto.EganowMoneyTransfer.MoneyTransferSuccessMessage>}
 */
const methodDescriptor_EganowMoneyTransferSvc_ResetUserPin = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/ResetUserPin',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.CustomerRequestMessage,
  proto.EganowMoneyTransfer.MoneyTransferSuccessMessage,
  /**
   * @param {!proto.EganowMoneyTransfer.CustomerRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.MoneyTransferSuccessMessage.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.CustomerRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.MoneyTransferSuccessMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.MoneyTransferSuccessMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.resetUserPin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/ResetUserPin',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_ResetUserPin,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.CustomerRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.MoneyTransferSuccessMessage>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.resetUserPin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/ResetUserPin',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_ResetUserPin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.MerchantCustomerAccountNoRequestMessage,
 *   !proto.EganowMoneyTransfer.MerchantCustomerAccountNoResponseMessage>}
 */
const methodDescriptor_EganowMoneyTransferSvc_GetMerchantCustomerKyc = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetMerchantCustomerKyc',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.MerchantCustomerAccountNoRequestMessage,
  proto.EganowMoneyTransfer.MerchantCustomerAccountNoResponseMessage,
  /**
   * @param {!proto.EganowMoneyTransfer.MerchantCustomerAccountNoRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.MerchantCustomerAccountNoResponseMessage.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.MerchantCustomerAccountNoRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.MerchantCustomerAccountNoResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.MerchantCustomerAccountNoResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.getMerchantCustomerKyc =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetMerchantCustomerKyc',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetMerchantCustomerKyc,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.MerchantCustomerAccountNoRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.MerchantCustomerAccountNoResponseMessage>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.getMerchantCustomerKyc =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetMerchantCustomerKyc',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetMerchantCustomerKyc);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.MoneyTransferEmptyMessage,
 *   !proto.EganowMoneyTransfer.CustomerEganowWalletBalanceListResponse>}
 */
const methodDescriptor_EganowMoneyTransferSvc_GetCustomerEganowBalances = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowBalances',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.MoneyTransferEmptyMessage,
  proto.EganowMoneyTransfer.CustomerEganowWalletBalanceListResponse,
  /**
   * @param {!proto.EganowMoneyTransfer.MoneyTransferEmptyMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.CustomerEganowWalletBalanceListResponse.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.MoneyTransferEmptyMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.CustomerEganowWalletBalanceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.CustomerEganowWalletBalanceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.getCustomerEganowBalances =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowBalances',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetCustomerEganowBalances,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.MoneyTransferEmptyMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.CustomerEganowWalletBalanceListResponse>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.getCustomerEganowBalances =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowBalances',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetCustomerEganowBalances);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.CustTransRequestMessage,
 *   !proto.EganowMoneyTransfer.CustTransListResponseMessage>}
 */
const methodDescriptor_EganowMoneyTransferSvc_GetCustomerEganowTransactions = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowTransactions',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.CustTransRequestMessage,
  proto.EganowMoneyTransfer.CustTransListResponseMessage,
  /**
   * @param {!proto.EganowMoneyTransfer.CustTransRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.CustTransListResponseMessage.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.CustTransRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.CustTransListResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.CustTransListResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.getCustomerEganowTransactions =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowTransactions',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetCustomerEganowTransactions,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.CustTransRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.CustTransListResponseMessage>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.getCustomerEganowTransactions =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowTransactions',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetCustomerEganowTransactions);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EganowMoneyTransfer.CustTransRequestMessage,
 *   !proto.EganowMoneyTransfer.CustStatementListResponseMessage>}
 */
const methodDescriptor_EganowMoneyTransferSvc_GetCustomerEganowStatement = new grpc.web.MethodDescriptor(
  '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowStatement',
  grpc.web.MethodType.UNARY,
  proto.EganowMoneyTransfer.CustTransRequestMessage,
  proto.EganowMoneyTransfer.CustStatementListResponseMessage,
  /**
   * @param {!proto.EganowMoneyTransfer.CustTransRequestMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EganowMoneyTransfer.CustStatementListResponseMessage.deserializeBinary
);


/**
 * @param {!proto.EganowMoneyTransfer.CustTransRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EganowMoneyTransfer.CustStatementListResponseMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EganowMoneyTransfer.CustStatementListResponseMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcClient.prototype.getCustomerEganowStatement =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowStatement',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetCustomerEganowStatement,
      callback);
};


/**
 * @param {!proto.EganowMoneyTransfer.CustTransRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EganowMoneyTransfer.CustStatementListResponseMessage>}
 *     Promise that resolves to the response
 */
proto.EganowMoneyTransfer.EganowMoneyTransferSvcPromiseClient.prototype.getCustomerEganowStatement =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowStatement',
      request,
      metadata || {},
      methodDescriptor_EganowMoneyTransferSvc_GetCustomerEganowStatement);
};


module.exports = proto.EganowMoneyTransfer;

